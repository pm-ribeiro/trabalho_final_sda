// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/30/2017 06:29:44"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    final_project
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module final_project_vlg_sample_tst(
	clock,
	data,
	enable,
	wren,
	sampler_tx
);
input  clock;
input [7:0] data;
input  enable;
input  wren;
output sampler_tx;

reg sample;
time current_time;
always @(clock or data or enable or wren)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module final_project_vlg_check_tst (
	addresstest,
	q,
	q2_test,
	sampler_rx
);
input [10:0] addresstest;
input [7:0] q;
input [7:0] q2_test;
input sampler_rx;

reg [10:0] addresstest_expected;
reg [7:0] q_expected;
reg [7:0] q2_test_expected;

reg [10:0] addresstest_prev;
reg [7:0] q_prev;
reg [7:0] q2_test_prev;

reg [10:0] addresstest_expected_prev;
reg [7:0] q_expected_prev;
reg [7:0] q2_test_expected_prev;

reg [10:0] last_addresstest_exp;
reg [7:0] last_q_exp;
reg [7:0] last_q2_test_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	addresstest_prev = addresstest;
	q_prev = q;
	q2_test_prev = q2_test;
end

// update expected /o prevs

always @(trigger)
begin
	addresstest_expected_prev = addresstest_expected;
	q_expected_prev = q_expected;
	q2_test_expected_prev = q2_test_expected;
end


// expected addresstest[ 10 ]
initial
begin
	addresstest_expected[10] = 1'bX;
end 
// expected addresstest[ 9 ]
initial
begin
	addresstest_expected[9] = 1'bX;
end 
// expected addresstest[ 8 ]
initial
begin
	addresstest_expected[8] = 1'bX;
end 
// expected addresstest[ 7 ]
initial
begin
	addresstest_expected[7] = 1'bX;
end 
// expected addresstest[ 6 ]
initial
begin
	addresstest_expected[6] = 1'bX;
end 
// expected addresstest[ 5 ]
initial
begin
	addresstest_expected[5] = 1'bX;
end 
// expected addresstest[ 4 ]
initial
begin
	addresstest_expected[4] = 1'bX;
end 
// expected addresstest[ 3 ]
initial
begin
	addresstest_expected[3] = 1'bX;
end 
// expected addresstest[ 2 ]
initial
begin
	addresstest_expected[2] = 1'bX;
end 
// expected addresstest[ 1 ]
initial
begin
	addresstest_expected[1] = 1'bX;
end 
// expected addresstest[ 0 ]
initial
begin
	addresstest_expected[0] = 1'bX;
end 
// expected q[ 7 ]
initial
begin
	q_expected[7] = 1'bX;
end 
// expected q[ 6 ]
initial
begin
	q_expected[6] = 1'bX;
end 
// expected q[ 5 ]
initial
begin
	q_expected[5] = 1'bX;
end 
// expected q[ 4 ]
initial
begin
	q_expected[4] = 1'bX;
end 
// expected q[ 3 ]
initial
begin
	q_expected[3] = 1'bX;
end 
// expected q[ 2 ]
initial
begin
	q_expected[2] = 1'bX;
end 
// expected q[ 1 ]
initial
begin
	q_expected[1] = 1'bX;
end 
// expected q[ 0 ]
initial
begin
	q_expected[0] = 1'bX;
end 
// expected q2_test[ 7 ]
initial
begin
	q2_test_expected[7] = 1'bX;
end 
// expected q2_test[ 6 ]
initial
begin
	q2_test_expected[6] = 1'bX;
end 
// expected q2_test[ 5 ]
initial
begin
	q2_test_expected[5] = 1'bX;
end 
// expected q2_test[ 4 ]
initial
begin
	q2_test_expected[4] = 1'bX;
end 
// expected q2_test[ 3 ]
initial
begin
	q2_test_expected[3] = 1'bX;
end 
// expected q2_test[ 2 ]
initial
begin
	q2_test_expected[2] = 1'bX;
end 
// expected q2_test[ 1 ]
initial
begin
	q2_test_expected[1] = 1'bX;
end 
// expected q2_test[ 0 ]
initial
begin
	q2_test_expected[0] = 1'bX;
end 
// generate trigger
always @(addresstest_expected or addresstest or q_expected or q or q2_test_expected or q2_test)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected addresstest = %b | expected q = %b | expected q2_test = %b | ",addresstest_expected_prev,q_expected_prev,q2_test_expected_prev);
	$display("| real addresstest = %b | real q = %b | real q2_test = %b | ",addresstest_prev,q_prev,q2_test_prev);
`endif
	if (
		( addresstest_expected_prev[0] !== 1'bx ) && ( addresstest_prev[0] !== addresstest_expected_prev[0] )
		&& ((addresstest_expected_prev[0] !== last_addresstest_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addresstest[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addresstest_expected_prev);
		$display ("     Real value = %b", addresstest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addresstest_exp[0] = addresstest_expected_prev[0];
	end
	if (
		( addresstest_expected_prev[1] !== 1'bx ) && ( addresstest_prev[1] !== addresstest_expected_prev[1] )
		&& ((addresstest_expected_prev[1] !== last_addresstest_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addresstest[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addresstest_expected_prev);
		$display ("     Real value = %b", addresstest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addresstest_exp[1] = addresstest_expected_prev[1];
	end
	if (
		( addresstest_expected_prev[2] !== 1'bx ) && ( addresstest_prev[2] !== addresstest_expected_prev[2] )
		&& ((addresstest_expected_prev[2] !== last_addresstest_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addresstest[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addresstest_expected_prev);
		$display ("     Real value = %b", addresstest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addresstest_exp[2] = addresstest_expected_prev[2];
	end
	if (
		( addresstest_expected_prev[3] !== 1'bx ) && ( addresstest_prev[3] !== addresstest_expected_prev[3] )
		&& ((addresstest_expected_prev[3] !== last_addresstest_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addresstest[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addresstest_expected_prev);
		$display ("     Real value = %b", addresstest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addresstest_exp[3] = addresstest_expected_prev[3];
	end
	if (
		( addresstest_expected_prev[4] !== 1'bx ) && ( addresstest_prev[4] !== addresstest_expected_prev[4] )
		&& ((addresstest_expected_prev[4] !== last_addresstest_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addresstest[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addresstest_expected_prev);
		$display ("     Real value = %b", addresstest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addresstest_exp[4] = addresstest_expected_prev[4];
	end
	if (
		( addresstest_expected_prev[5] !== 1'bx ) && ( addresstest_prev[5] !== addresstest_expected_prev[5] )
		&& ((addresstest_expected_prev[5] !== last_addresstest_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addresstest[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addresstest_expected_prev);
		$display ("     Real value = %b", addresstest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addresstest_exp[5] = addresstest_expected_prev[5];
	end
	if (
		( addresstest_expected_prev[6] !== 1'bx ) && ( addresstest_prev[6] !== addresstest_expected_prev[6] )
		&& ((addresstest_expected_prev[6] !== last_addresstest_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addresstest[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addresstest_expected_prev);
		$display ("     Real value = %b", addresstest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addresstest_exp[6] = addresstest_expected_prev[6];
	end
	if (
		( addresstest_expected_prev[7] !== 1'bx ) && ( addresstest_prev[7] !== addresstest_expected_prev[7] )
		&& ((addresstest_expected_prev[7] !== last_addresstest_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addresstest[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addresstest_expected_prev);
		$display ("     Real value = %b", addresstest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addresstest_exp[7] = addresstest_expected_prev[7];
	end
	if (
		( addresstest_expected_prev[8] !== 1'bx ) && ( addresstest_prev[8] !== addresstest_expected_prev[8] )
		&& ((addresstest_expected_prev[8] !== last_addresstest_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addresstest[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addresstest_expected_prev);
		$display ("     Real value = %b", addresstest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addresstest_exp[8] = addresstest_expected_prev[8];
	end
	if (
		( addresstest_expected_prev[9] !== 1'bx ) && ( addresstest_prev[9] !== addresstest_expected_prev[9] )
		&& ((addresstest_expected_prev[9] !== last_addresstest_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addresstest[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addresstest_expected_prev);
		$display ("     Real value = %b", addresstest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addresstest_exp[9] = addresstest_expected_prev[9];
	end
	if (
		( addresstest_expected_prev[10] !== 1'bx ) && ( addresstest_prev[10] !== addresstest_expected_prev[10] )
		&& ((addresstest_expected_prev[10] !== last_addresstest_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addresstest[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addresstest_expected_prev);
		$display ("     Real value = %b", addresstest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addresstest_exp[10] = addresstest_expected_prev[10];
	end
	if (
		( q_expected_prev[0] !== 1'bx ) && ( q_prev[0] !== q_expected_prev[0] )
		&& ((q_expected_prev[0] !== last_q_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q_exp[0] = q_expected_prev[0];
	end
	if (
		( q_expected_prev[1] !== 1'bx ) && ( q_prev[1] !== q_expected_prev[1] )
		&& ((q_expected_prev[1] !== last_q_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q_exp[1] = q_expected_prev[1];
	end
	if (
		( q_expected_prev[2] !== 1'bx ) && ( q_prev[2] !== q_expected_prev[2] )
		&& ((q_expected_prev[2] !== last_q_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q_exp[2] = q_expected_prev[2];
	end
	if (
		( q_expected_prev[3] !== 1'bx ) && ( q_prev[3] !== q_expected_prev[3] )
		&& ((q_expected_prev[3] !== last_q_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q_exp[3] = q_expected_prev[3];
	end
	if (
		( q_expected_prev[4] !== 1'bx ) && ( q_prev[4] !== q_expected_prev[4] )
		&& ((q_expected_prev[4] !== last_q_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q_exp[4] = q_expected_prev[4];
	end
	if (
		( q_expected_prev[5] !== 1'bx ) && ( q_prev[5] !== q_expected_prev[5] )
		&& ((q_expected_prev[5] !== last_q_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q_exp[5] = q_expected_prev[5];
	end
	if (
		( q_expected_prev[6] !== 1'bx ) && ( q_prev[6] !== q_expected_prev[6] )
		&& ((q_expected_prev[6] !== last_q_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q_exp[6] = q_expected_prev[6];
	end
	if (
		( q_expected_prev[7] !== 1'bx ) && ( q_prev[7] !== q_expected_prev[7] )
		&& ((q_expected_prev[7] !== last_q_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q_exp[7] = q_expected_prev[7];
	end
	if (
		( q2_test_expected_prev[0] !== 1'bx ) && ( q2_test_prev[0] !== q2_test_expected_prev[0] )
		&& ((q2_test_expected_prev[0] !== last_q2_test_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q2_test[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q2_test_expected_prev);
		$display ("     Real value = %b", q2_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_q2_test_exp[0] = q2_test_expected_prev[0];
	end
	if (
		( q2_test_expected_prev[1] !== 1'bx ) && ( q2_test_prev[1] !== q2_test_expected_prev[1] )
		&& ((q2_test_expected_prev[1] !== last_q2_test_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q2_test[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q2_test_expected_prev);
		$display ("     Real value = %b", q2_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_q2_test_exp[1] = q2_test_expected_prev[1];
	end
	if (
		( q2_test_expected_prev[2] !== 1'bx ) && ( q2_test_prev[2] !== q2_test_expected_prev[2] )
		&& ((q2_test_expected_prev[2] !== last_q2_test_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q2_test[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q2_test_expected_prev);
		$display ("     Real value = %b", q2_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_q2_test_exp[2] = q2_test_expected_prev[2];
	end
	if (
		( q2_test_expected_prev[3] !== 1'bx ) && ( q2_test_prev[3] !== q2_test_expected_prev[3] )
		&& ((q2_test_expected_prev[3] !== last_q2_test_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q2_test[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q2_test_expected_prev);
		$display ("     Real value = %b", q2_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_q2_test_exp[3] = q2_test_expected_prev[3];
	end
	if (
		( q2_test_expected_prev[4] !== 1'bx ) && ( q2_test_prev[4] !== q2_test_expected_prev[4] )
		&& ((q2_test_expected_prev[4] !== last_q2_test_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q2_test[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q2_test_expected_prev);
		$display ("     Real value = %b", q2_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_q2_test_exp[4] = q2_test_expected_prev[4];
	end
	if (
		( q2_test_expected_prev[5] !== 1'bx ) && ( q2_test_prev[5] !== q2_test_expected_prev[5] )
		&& ((q2_test_expected_prev[5] !== last_q2_test_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q2_test[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q2_test_expected_prev);
		$display ("     Real value = %b", q2_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_q2_test_exp[5] = q2_test_expected_prev[5];
	end
	if (
		( q2_test_expected_prev[6] !== 1'bx ) && ( q2_test_prev[6] !== q2_test_expected_prev[6] )
		&& ((q2_test_expected_prev[6] !== last_q2_test_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q2_test[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q2_test_expected_prev);
		$display ("     Real value = %b", q2_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_q2_test_exp[6] = q2_test_expected_prev[6];
	end
	if (
		( q2_test_expected_prev[7] !== 1'bx ) && ( q2_test_prev[7] !== q2_test_expected_prev[7] )
		&& ((q2_test_expected_prev[7] !== last_q2_test_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q2_test[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q2_test_expected_prev);
		$display ("     Real value = %b", q2_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_q2_test_exp[7] = q2_test_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module final_project_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [7:0] data;
reg enable;
reg wren;
// wires                                               
wire [10:0] addresstest;
wire [7:0] q;
wire [7:0] q2_test;

wire sampler;                             

// assign statements (if any)                          
final_project i1 (
// port map - connection between master ports and signals/registers   
	.addresstest(addresstest),
	.clock(clock),
	.data(data),
	.enable(enable),
	.q(q),
	.q2_test(q2_test),
	.wren(wren)
);

// clock
always
begin
	clock = 1'b0;
	clock = #2500 1'b1;
	#2500;
end 
// data[ 7 ]
initial
begin
	data[7] = 1'b0;
end 
// data[ 6 ]
initial
begin
	data[6] = 1'b0;
end 
// data[ 5 ]
initial
begin
	data[5] = 1'b0;
end 
// data[ 4 ]
initial
begin
	data[4] = 1'b0;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b0;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b0;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b0;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b0;
end 

// enable
initial
begin
	enable = 1'b1;
end 

// wren
initial
begin
	repeat(66)
	begin
		wren = 1'b0;
		wren = #7500 1'b1;
		# 7500;
	end
	wren = 1'b0;
	wren = #7500 1'b1;
end 

final_project_vlg_sample_tst tb_sample (
	.clock(clock),
	.data(data),
	.enable(enable),
	.wren(wren),
	.sampler_tx(sampler)
);

final_project_vlg_check_tst tb_out(
	.addresstest(addresstest),
	.q(q),
	.q2_test(q2_test),
	.sampler_rx(sampler)
);
endmodule

